Description: >
    This is an example of a long running ECS service that needs to connect to another ECS service (product-service)
    via it's load balancer. We use environment variables to pass the URL of the product-service to this one's container(s).

Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    ImageURL:
        Description: URL for the docker image.
        Type: String

    ServiceName:
        Description: Name of the service.
        Type: String

    ContainerCpu:
        Description: CPU capabilities.
        Type: String

    ContainerMemory:
        Description: Container Memory capabilities
        Type: String

    ContainerPort:
        Description: Container INPUT port.
        Type: String

    DesiredCount:
        Description: Desired count of services to be provision.
        Type: String

    Subnets:
        Description: Choose which subnets the Applicaion Load Balancer should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to apply to the container.
        Type: AWS::EC2::SecurityGroup::Id

    TargetGroup:
        Description: ALB Target Group.
        Type: String

    Role:
        Description: Service Role.
        Type: String



Resources:

    # The task definition.
    TaskDefinition:
      Type: AWS::ECS::TaskDefinition
      Properties:
        Family: !Ref 'ServiceName'
        Cpu: !Ref 'ContainerCpu'
        Memory: !Ref 'ContainerMemory'
        NetworkMode: awsvpc
        RequiresCompatibilities:
          - FARGATE
        ExecutionRoleArn: !Ref 'ECSTaskExecutionRole'
        TaskRoleArn: !Ref Taskrole
        ContainerDefinitions:
          - Name: !Ref 'ServiceName'
            Cpu: !Ref 'ContainerCpu'
            Memory: !Ref 'ContainerMemory'
            Image: !Ref 'ImageURL'
            PortMappings:
              - ContainerPort: !Ref 'ContainerPort'
            LogConfiguration:
              LogDriver: awslogs
              Options:
                awslogs-group: !Ref AWS::StackName
                awslogs-region: !Ref AWS::Region
                awslogs-stream-prefix: "circleci"

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    Taskrole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument: |
                    {
                          "Version": "2012-10-17",
                          "Statement": [
                            {
                              "Sid": "",
                              "Effect": "Allow",
                              "Principal": {
                                "Service": "ecs-tasks.amazonaws.com"
                              },
                              "Action": "sts:AssumeRole"
                            }
                          ]
                    }
            Policies:
                - PolicyName: !Sub ecs-service-${AWS::StackName}
                  PolicyDocument:
                    {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Action": "*",
                                "Resource": "*"
                        }]
                    }

    # This is a role which is used by the ECS tasks themselves.
    ECSTaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: AmazonECSTaskExecutionRolePolicy
            PolicyDocument:
              Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                    # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'



    #This IAM Role grants the service access to register/unregister with the
    #Application Load Balancer (ALB). It is based on the default documented here:
    #http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    #The service.
    Service:
      Type: AWS::ECS::Service
      Properties:
        ServiceName: !Ref 'ServiceName'
        Cluster: !Ref Cluster
        LaunchType: FARGATE
        DeploymentConfiguration:
          MaximumPercent: 200
          MinimumHealthyPercent: 100
        DesiredCount: !Ref 'DesiredCount'
        NetworkConfiguration:
          AwsvpcConfiguration:
            AssignPublicIp: ENABLED
            SecurityGroups: [!Ref 'SecurityGroup']
            Subnets: !Ref Subnets
        TaskDefinition: !Ref 'TaskDefinition'
        LoadBalancers:
          - ContainerName: !Ref 'ServiceName'
            ContainerPort: !Ref 'ContainerPort'
            TargetGroupArn: !Ref 'TargetGroup'
